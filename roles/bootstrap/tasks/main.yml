---
- name: Install linux-modules-extra
  apt:
    name: [ "linux-modules-extra-{{ ansible_kernel }}", "linux-image-extra-virtual" ]
- name: Install prereqs for docker repo
  apt:
    name: [ apt-transport-https, ca-certificates, curl, software-properties-common ]
- name: Install docker apt-key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
- name: Install docker repo
  apt_repository:
    repo: deb [arch={{ (ansible_architecture == "x86_64") | ternary('amd64', ansible_architecture) }}] https://download.docker.com/linux/ubuntu xenial stable
- name: Install docker-ce and python-docker
  apt:
    name: [docker-ce, python-docker]
    update_cache: yes
- name: Install docker-compose
  shell: curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose
- name: add vagrant user to docker group
  user:
    name: vagrant
    groups: [docker]
- name: create jenkins ssh keypair
  openssh_keypair:
    path: /home/vagrant/.ssh/jenkins
    owner: vagrant
    group: vagrant
    type: rsa
    size: 4096
    state: present
- name: ensure jenkins.pub is in authorized_keys
  authorized_key:
    key: "{{ lookup('file', '/home/vagrant/.ssh/jenkins.pub') }}"
    user: vagrant
    state: present
- name: set up networks
  docker_network:
    name: "{{ item.name }}"
    driver: bridge
    ipam_config:
      - subnet: "{{ item.subnet }}"
        gateway: "{{ item.gateway }}"
  with_items:
    - name: prod
      subnet: 172.22.0.0/16
      gateway: 172.22.0.1
    - name: test
      subnet: 172.26.0.0/16
      gateway: 172.26.0.1
- name: hosts file entries
  lineinfile:
    dest: /etc/hosts
    line: "{{ item }}"
    state: present
  with_items:
    - "{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}} jenkins.{{ cert_domain }}"
    - "{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}} jenkinstest.{{ cert_domain }}"
